name: CI Workflow

on:
  push:
    branches:
      - spike-deployment
  pull_request:
    branches: 
      - main        # Run on pull requests targeting main branch
      - development # Run on pull requests targeting development branch

jobs:
  # Job 1: Install Dependencies (shared)
  setup:
    runs-on: ubuntu-latest
    outputs:
      node-modules-cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Updated to v4

      - name: Set up Node.js
        uses: actions/setup-node@v4  # Updated to v4
        with:
          node-version: '20'

      - name: Cache Node.js modules
        id: cache-deps
        uses: actions/cache@v4  # Updated to v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json')}}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci

  # Job 2: Lint Project (runs in parallel with TypeScript, Prettier and Test checks)
  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Updated to v4

      - name: Use shared dependencies cache
        uses: actions/cache@v4  # Updated to v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run ESLint
        run: npx eslint .

  # Job 3: Check TypeScript (runs in parallel with Linting, Prettier and Test checks)
  check-ts:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Updated to v4

      - name: Use shared dependencies cache
        uses: actions/cache@v4  # Updated to v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Check TypeScript
        run: npx tsc --noEmit

  # Job 4: Prettier Check (runs in parallel with Linting, TypeScript and Test checks)
  prettier:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Updated to v4

      - name: Use shared dependencies cache
        uses: actions/cache@v4  # Updated to v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run Prettier Check
        run: npx prettier --check .

  # Job 5 Run Tests (runs in parallel with Linting, TypeScript and Prettier checks)
  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  

      - name: Use shared dependencies cache
        uses: actions/cache@v4  
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      
      - name: Run Tests
        run: npx vitest

  # Job 5: Build Project (runs after all checks)
  build:
    needs: [lint, check-ts, prettier, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Updated to v4

      - name: Use shared dependencies cache
        uses: actions/cache@v4  # Updated to v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Build the project
        run: npx vite build --mode prod

  # Job 6: Register container        
  build-and-push:
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Determine Image Tag
        run: echo "IMAGE_TAG=pr-${{ github.event.pull_request.number || github.sha }}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/qa-platform-client:${{ env.IMAGE_TAG }} .

      - name: Push Docker image to GitHub Container Registry
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/qa-platform-client:${{ env.IMAGE_TAG }}
